// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id      String      @id @unique
  login   String @unique
  version Int @default(1)
  password String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())
}

model Track {
  id String @id @unique @default(uuid())
  name String
  artist Artist? @relation(fields: [artistId], references: [id])
  artistId String? @unique
  album Album? @relation(fields: [albumId], references: [id])
  albumId String? @unique
  duration Int
  FavsTracks FavsTracks?
}

model Artist {
 id String @id @unique @default(uuid())
  name String
  grammy Boolean
  Album Album[]
  Track Track[]

  FavsArtists FavsArtists?
}

model Album {
 id String @id @unique @default(uuid())
  name String
  year Int
  artist Artist? @relation(fields: [artistId], references: [id])
  artistId String? @unique
  Track Track[]

  FavsAlbum FavsAlbums?
}

model FavsTracks {
  id String @id @unique @default(uuid())
  track Track @relation(fields: [trackId], references: [id], onDelete: Cascade)
  trackId String @unique
}

model FavsAlbums {
  id String @id @unique @default(uuid())
  album Album @relation(fields: [albumId], references: [id], onDelete: Cascade)
  albumId String @unique
}

model FavsArtists {
  id String @id @unique @default(uuid())
  album Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artistId String @unique
}